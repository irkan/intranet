/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.9
 * Generated at: 2018-08-16 07:46:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      BEANS.CSSTotal CSS = null;
      synchronized (application) {
        CSS = (BEANS.CSSTotal) _jspx_page_context.getAttribute("CSS", javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        if (CSS == null){
          CSS = new BEANS.CSSTotal();
          _jspx_page_context.setAttribute("CSS", CSS, javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        }
      }
      out.write('\n');
      BEANS.css1Bean CSS3 = null;
      CSS3 = (BEANS.css1Bean) _jspx_page_context.getAttribute("CSS3", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (CSS3 == null){
        CSS3 = new BEANS.css1Bean();
        _jspx_page_context.setAttribute("CSS3", CSS3, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\n');
      BEANS.cssPage CSS1 = null;
      CSS1 = (BEANS.cssPage) _jspx_page_context.getAttribute("CSS1", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (CSS1 == null){
        CSS1 = new BEANS.cssPage();
        _jspx_page_context.setAttribute("CSS1", CSS1, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\n');
      BEANS.SLOGAN SLOGAN = null;
      synchronized (application) {
        SLOGAN = (BEANS.SLOGAN) _jspx_page_context.getAttribute("SLOGAN", javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        if (SLOGAN == null){
          SLOGAN = new BEANS.SLOGAN();
          _jspx_page_context.setAttribute("SLOGAN", SLOGAN, javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
        }
      }
      out.write('\n');
      BEANS.IndexBean INDEX = null;
      INDEX = (BEANS.IndexBean) _jspx_page_context.getAttribute("INDEX", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (INDEX == null){
        INDEX = new BEANS.IndexBean();
        _jspx_page_context.setAttribute("INDEX", INDEX, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" >\n");
      out.write("        ");

            String id = "2";
            if (request.getParameter("id") != null) {
                id = request.getParameter("id");
            }
            INDEX.setId(id, request);
            String res = INDEX.getRes();
            String title = INDEX.getTitle();
            String slogan = SLOGAN.getSlogan(request);
            String css = CSS.getCSS(request);
            String css1 = CSS1.getCSS(id, request);
        
      out.write("\n");
      out.write("        <title>");
      out.print(title);
      out.write("</title>\n");
      out.write("        <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <meta http-equiv=\"content-style-type\" content=\"text/css\">\n");
      out.write("        <link rel=\"stylesheet\" href=\"/FILES/alloy/build/aui-skin-classic/css/aui-skin-classic-all-min.css\" type=\"text/css\" media=\"screen\" />\n");
      out.write("        <script src=\"/FILES/alloy/build/aui/aui.js\" type=\"text/javascript\"></script>\n");
      out.write("        <link rel=\"stylesheet\" href=\"index.css\" type=\"text/css\" />\n");
      out.write("        <link rel=\"stylesheet\" href=\"blue.css\" type=\"text/css\" />\n");
      out.write("        <style type=\"text/css\">\n");
      out.write("            @import url('vids.css');\n");
      out.write("            @import url('css/exxo.css');\n");
      out.write("            .yui3-scrollview-first,  .yui3-scrollview-last{visibility:hidden;}\n");
      out.write("            .newDocsContent li,.newBlogsContent li {line-height: 0; display: block;}\n");
      out.write("            div.exxo-scrollview-up {position: absolute; width: 24px; height: 24px; background-color: white; z-index: 999; bottom: 1px; right: 1px; cursor: pointer; background-image: url(/EXXO/small/tobegin.png); background-position: center center; background-repeat: no-repeat; background-size: auto auto; border-radius: 20px;border: 1px solid #bfbfbf;}\n");
      out.write("            div.exxo-scrollview-buttons {position: absolute; width: 52px; height: 26px; background-color: transparent; z-index: 999; top: 0px; right: 0px;}\n");
      out.write("            button.exxo-scrollview-next {position: relative; display: inline-block; width: 20px; height: 20px; background-color: #dedede; cursor: pointer;background-image: url(/EXXO/small/arrow-up.png); background-position: center center; background-repeat: no-repeat; border-radius: 12px; border: 1px solid #bfbfbf; margin: 1px;}\n");
      out.write("            button.exxo-scrollview-back {position: relative; display: inline-block; width: 20px; height: 20px; background-color: #dedede; cursor: pointer;background-image: url(/EXXO/small/arrow-down.png); background-position: center center; background-repeat: no-repeat; border-radius: 12px; border: 1px solid #bfbfbf; margin: 1px;}\n");
      out.write("            button.exxo-scrollview-back:hover {border-color: #dedede;background-color: white;}\n");
      out.write("            button.exxo-scrollview-next:hover {border-color: #dedede;background-color: white;}\n");
      out.write("            div.exxo-scrollview-up:hover {border-color: #dedede; background-color: white;}\n");
      out.write("            .exxo-hidden {display: none !important;}\n");
      out.write("            .newDocsContent tr.docs td,.newBlogsContent tr.blog td {line-height: normal; height: 44px; padding: 6px;}\n");
      out.write("            .newDocsContent tr.docs td.first,.newBlogsContent tr.blog td.first {width: 22px;padding: 2px; }\n");
      out.write("            .newDocsContent tr.docs td.created, .newBlogsContent tr.blog td.created {width: 100px; }\n");
      out.write("            .newDocsContent tr.docs td.fio,.newBlogsContent tr.blog td.fio {width: 33px;}\n");
      out.write("            .newDocsContent tr.docs td.fio div,.newBlogsContent tr.blog td.fio div {background-size: contain; background-position: center center; background-repeat: no-repeat; height: 44px; border-radius: 5px;}\n");
      out.write("            .newDocsContent tr.docs td.first div,.newBlogsContent tr.blog td.first div {width: 100%; height: 20px; background-position: center center; background-repeat: no-repeat;}\n");
      out.write("            .newDocsContent tr.docs td.fil a,.newBlogsContent tr.blog td.fil a{display: block; width: auto; height: 44px; overflow: hidden; text-decoration: none;}\n");
      out.write("            span.exxo-date {padding-right: 10px;font-weight: bold;}\n");
      out.write("            a.notopend {font-weight: normal; color: black;}\n");
      out.write("            #docsH3 {margin:0; padding: 5px; background-color: rgb(59,59,82);border-radius: 4px 4px 0px 0px;}\n");
      out.write("            #docsH3 a {color: #dedede;}\n");
      out.write("            #docsH3 a:hover {color: white;}\n");
      out.write("            #blogH3 {margin:0; padding: 5px; background-color: rgb(82, 82, 136);border-radius: 4px 4px 0px 0px;}\n");
      out.write("            #blogH3 a {color: #dedede;}\n");
      out.write("            #blogH3 a:hover {color: white;}\n");
      out.write("            div.portlet {border-radius: 4px;}\n");
      out.write("            .newGalsContent li.gal a {display: inline-block;width: 120px;height: 120px;margin: 2px;background-position: center;background-repeat: no-repeat;}\n");
      out.write("            .newGalsContent li.gal, .IMG li {background-image: none; display: inline-block; margin:0; padding:0;}\n");
      out.write("            .newGalsContent, .IMG{white-space:nowrap;}\n");
      out.write("\n");
      out.write("        </style>\n");
      out.write("        <style>");
      out.print(css);
      out.write("</style>\n");
      out.write("        <style>");
      out.print(CSS3.getCSS("index.jsp", request));
      out.write("</style>\n");
      out.write("        <style>");
      out.print(css1);
      out.write("</style>\n");
      out.write("    </head>\n");
      out.write("    <body class=\"yui3-skin-sam\" id=\"index_jsp\">\n");
      out.write("        <div id=\"content-wrapper\">\n");
      out.write("            <div id=\"header\">\n");
      out.write("                <table id=\"tableH\">\n");
      out.write("                    <tbody>\n");
      out.write("                        <tr>\n");
      out.write("                            <td id=\"tdlogo\"><img src=\"logo.png\" id=\"logo\"></td>\n");
      out.write("                            <td>\n");
      out.write("                                <div id=\"head\">\n");
      out.write("                                    <table>\n");
      out.write("                                        <tbody>\n");
      out.write("                                            <tr>\n");
      out.write("                                                <td id=\"slogan\" valign=\"center\">");
      out.print( slogan);
      out.write("</td>\n");
      out.write("                                                <td>");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "poisk", out, true);
      out.write("</td>\n");
      out.write("                                            </tr>\n");
      out.write("                                        </tbody>\n");
      out.write("                                    </table>\n");
      out.write("                                </div>\n");
      out.write("                                <div id=\"foot\">\n");
      out.write("                                    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "topMenu", out, true);
      out.write("\n");
      out.write("                                    <a href=\"main.jsp?id=");
      out.print(id);
      out.write("\" class=\"footmenu\">Redaktə et</a> <a href=\"#\" class=\"footmenu howto\" target=\"_blank\">?</a></div>\n");
      out.write("                            </td>\n");
      out.write("                        </tr>\n");
      out.write("                    </tbody>\n");
      out.write("                </table>\n");
      out.write("            </div>\n");
      out.write("            ");
      out.print(res);
      out.write("\n");
      out.write("            ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "FOOTER", out, true);
      out.write("\n");
      out.write("        </div>\n");
      out.write("        <div id=\"menus\" class=\"yui3-menu\">");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "menu.jsp", out, true);
      out.write("</div>\n");
      out.write("        <div id=\"imger\"><div id=\"close\"><span>BAĞLA</span></div><div id=\"imgerViewer\"></div></div>\n");
      out.write("        <script type=\"text/javascript\">\n");
      out.write("            YUI().ready('node-menunav', function (A) {\n");
      out.write("                var menu = A.one(\"#menus\");\n");
      out.write("                menu.plug(A.Plugin.NodeMenuNav, {submenuHideDelay: 1000, mouseOutHideDelay: 50, submenuShowDelay: 50});\n");
      out.write("                menu.get(\"ownerDocument\").get(\"documentElement\").removeClass(\"aui-loading\");\n");
      out.write("            });\n");
      out.write("        </script>\n");
      out.write("        <script type=\"text/javascript\">\n");
      out.write("            AUI().ready('aui-overlay-mask', 'aui-io-request', 'anim', 'aui-scroller', 'scrollview', 'scrollview-paginator', 'datatype-number', function (A) {\n");
      out.write("                A.one('#content-wrapper').setStyle('minHeight', A.DOM.winHeight() + 'px');\n");
      out.write("                var sv_height = 285;\n");
      out.write("                A.all(\".portlet\").each(function () {\n");
      out.write("                    var ins = this;\n");
      out.write("                    var id = ins.getAttribute('id');\n");
      out.write("                    ins.empty();\n");
      out.write("                    if (id.indexOf(\"text\") == 0) {\n");
      out.write("                        opener(id, 'textOut', ins);\n");
      out.write("                    } else if (id.indexOf(\"calendar\") == 0) {\n");
      out.write("                        opener(id, 'eventsVid', ins);\n");
      out.write("                    } else if (id.indexOf(\"Birthday\") == 0) {\n");
      out.write("                        opener(id, 'birthOut', ins);\n");
      out.write("                    } else if (id.indexOf(\"newComers\") == 0) {\n");
      out.write("                        opener(id, 'newComers', ins);\n");
      out.write("                    } else if (id.indexOf(\"newDocsK\") == 0) {\n");
      out.write("                        opener(id, 'newDocK', ins);\n");
      out.write("                    } else if (id.indexOf(\"newDocs\") == 0) {\n");
      out.write("                        opener(id, 'newDoc', ins);\n");
      out.write("                    } else if (id.indexOf(\"newNews\") == 0) {\n");
      out.write("                        opener(id, 'newNews', ins);\n");
      out.write("                    } else if (id.indexOf(\"newGal\") == 0) {\n");
      out.write("                        opener(id, 'newGal', ins);\n");
      out.write("                    } else if (id.indexOf(\"newKGal\") == 0) {\n");
      out.write("                        opener(id, 'newKGal', ins);\n");
      out.write("                    } else if (id.indexOf(\"newDesk\") == 0) {\n");
      out.write("                        opener(id, 'newDesk', ins);\n");
      out.write("                    } else if (id.indexOf(\"newBlog\") == 0) {\n");
      out.write("                        opener(id, 'newBlog', ins);\n");
      out.write("                    } else if (id.indexOf(\"newBBlog\") == 0) {\n");
      out.write("                        opener(id, 'newBBlog', ins);\n");
      out.write("                    } else if (id.indexOf(\"newPhotos\") == 0) {\n");
      out.write("                        opener(id, 'NewPhotos', ins);\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("                function opener(x2, servlet, node) {\n");
      out.write("                    var width = Math.round(A.Number.parse(node.getComputedStyle('width').split('px')[0]));\n");
      out.write("                    var nodeFontSize = A.Number.parse(node.getComputedStyle('fontSize').split('px')[0]);\n");
      out.write("                    var classNode = \"exxo-width-normal\";\n");
      out.write("                    if (width <= 250)\n");
      out.write("                        classNode = \"exxo-width-small\";\n");
      out.write("                    else if (width > 400)\n");
      out.write("                        classNode = \"exxo-width-big\";\n");
      out.write("                    A.io.request(servlet, {\n");
      out.write("                        dataType: 'text',\n");
      out.write("                        cache: false,\n");
      out.write("                        data: {id: x2, width: width, font: nodeFontSize},\n");
      out.write("                        method: 'post',\n");
      out.write("                        on: {success: function (event, id, xhr) {\n");
      out.write("                                node.html(this.get('responseData'));\n");
      out.write("                                if (servlet == 'textOut' || servlet == 'newNews') {\n");
      out.write("                                    node.all('img').each(function () {\n");
      out.write("                                        var style = this.getStyle('display');\n");
      out.write("                                        this.setStyle('display', 'none');\n");
      out.write("                                        width = Math.round(A.Number.parse(node.one('>div').getComputedStyle('width').split('px')[0]));\n");
      out.write("                                        this.setStyle('maxWidth', width + 'px');\n");
      out.write("                                        this.setStyle('display', style);\n");
      out.write("                                    });\n");
      out.write("                                    node.all(\"a.imger\").each(function () {\n");
      out.write("                                        var href = this.getAttribute('href');\n");
      out.write("                                        this.setAttribute('href', 'javascript:');\n");
      out.write("                                        this.on(\"click\", function () {\n");
      out.write("                                            overlayMask.set('target', document).show();\n");
      out.write("                                            A.one('#imger').setStyle('display', 'block');\n");
      out.write("                                            anim.run();\n");
      out.write("                                            var html = \"<img src='\" + href + \"'>\";\n");
      out.write("                                            A.one(\"#imgerViewer\").html(html).scrollIntoView( );\n");
      out.write("                                        });\n");
      out.write("                                    });\n");
      out.write("                                } else if (servlet == 'NewPhotos') {\n");
      out.write("                                    scrollViewH(node, \".IMG ul\", servlet, x2);\n");
      out.write("                                } else if (servlet == 'newBlog' || servlet == 'newBBlog') {\n");
      out.write("                                    scrollView(node, \"div.newBlogsContent ul\", servlet, x2);\n");
      out.write("                                } else if (servlet == 'newDoc' || servlet == 'newDocK') {\n");
      out.write("                                    scrollView(node, \"div.newDocsContent ul\", servlet, x2);\n");
      out.write("                                } else if (servlet == 'newDesk') {\n");
      out.write("                                    var component = new A.Scroller({contentBox: node.one('.desk'), height: sv_height, orientation: 'vertical', duration: 0.5}).render();\n");
      out.write("                                } else if (servlet == 'newGal' || servlet == 'newKGal') {\n");
      out.write("                                    scrollViewH(node, \"div.newGalsContent\", servlet, x2);\n");
      out.write("                                }\n");
      out.write("                            }}});\n");
      out.write("                }\n");
      out.write("                var overlayMask = new A.OverlayMask().render();\n");
      out.write("                A.one('#imger').setStyle('opacity', '0');\n");
      out.write("                A.one('#imger').setStyle('display', 'none');\n");
      out.write("                var anim = new A.Anim({node: '#imger', to: {opacity: 1}, on: {'start': function () {\n");
      out.write("                            A.one(\"#imger\").setStyle('display', 'block');\n");
      out.write("                            A.one('#close span').scrollIntoView( )\n");
      out.write("                        }}});\n");
      out.write("                var anim1 = new A.Anim({node: '#imger', to: {opacity: 0}, on: {'end': function () {\n");
      out.write("                            A.one(\"#imger\").setStyle('display', 'none');\n");
      out.write("                            overlayMask.hide();\n");
      out.write("                        }}});\n");
      out.write("                A.one('#close span').on('click', function (event) {\n");
      out.write("                    closer(A.one(\"#imger\"));\n");
      out.write("                });\n");
      out.write("                function closer(node) {\n");
      out.write("                    anim1.run();\n");
      out.write("                }\n");
      out.write("                A.one('#menus').setStyle('display', 'block').prependTo(A.one('#menu'));\n");
      out.write("                function appender(x2, servlet, sv, count, node) {\n");
      out.write("                    var width = Math.round(A.Number.parse(node.getComputedStyle('width').split('px')[0]));\n");
      out.write("                    var nodeFontSize = A.Number.parse(node.getComputedStyle('fontSize').split('px')[0]);\n");
      out.write("                    var content = sv.get('contentBox');\n");
      out.write("                    A.io.request(\"add_\" + servlet, {\n");
      out.write("                        dataType: 'text',\n");
      out.write("                        cache: false,\n");
      out.write("                        data: {id: x2, count: count, width: width, font: nodeFontSize},\n");
      out.write("                        method: 'post',\n");
      out.write("                        on: {success: function (event, id, xhr) {\n");
      out.write("                                content.append(this.get('responseData'));\n");
      out.write("                                sv.set('height', sv_height + 10 + \"px\");\n");
      out.write("                                sv.set('height', sv_height + \"px\");\n");
      out.write("                                sv.syncUI();\n");
      out.write("                                contentDelegate(sv);\n");
      out.write("                            }}});\n");
      out.write("                }\n");
      out.write("                ;\n");
      out.write("                function contentDelegate(sv) {\n");
      out.write("                    var content = sv.get(\"contentBox\");\n");
      out.write("                    content.delegate(\"click\", function (e) {\n");
      out.write("                        if (Math.abs(sv.lastScrolledAmt) > 2) {\n");
      out.write("                            e.preventDefault();\n");
      out.write("                        }\n");
      out.write("                    }, \"a\");\n");
      out.write("                    content.delegate(\"mousedown\", function (e) {\n");
      out.write("                        e.preventDefault();\n");
      out.write("                    }, \"a, li\");\n");
      out.write("                }\n");
      out.write("                function scrollView(node, string, servlet, x2) {\n");
      out.write("                    var count = 1;\n");
      out.write("                    var sv = new A.ScrollView({srcNode: node.one(string), height: sv_height, axis: \"y\", flick: {\n");
      out.write("                            minDistance: 10, minVelocity: 0.3, axis: \"y\"},\n");
      out.write("                        on: {'scrollEnd': function () {\n");
      out.write("                                if (sv.pages.get('index') == 0 && up != null)\n");
      out.write("                                    up.addClass('exxo-hidden');\n");
      out.write("                                else if (sv.pages.get('index') != 0)\n");
      out.write("                                    up.removeClass('exxo-hidden');\n");
      out.write("                                var h = 0;\n");
      out.write("                                sv.get('contentBox').all('table').each(function () {\n");
      out.write("                                    h += this.outerHeight();\n");
      out.write("                                });\n");
      out.write("                                if (count < 10 && (Math.abs(sv.get('scrollY') - h) < (sv_height + 200 * count))) {\n");
      out.write("                                    appender(x2, servlet, sv, count, node);\n");
      out.write("                                    count++;\n");
      out.write("                                }\n");
      out.write("                            }}\n");
      out.write("                    });\n");
      out.write("                    sv.plug(A.Plugin.ScrollViewPaginator, {selector: 'li'});\n");
      out.write("                    sv.render();\n");
      out.write("                    contentDelegate(sv);\n");
      out.write("                    node.setStyle('position', 'relative');\n");
      out.write("                    var up = A.Node.create(\"<div class='exxo-scrollview-up exxo-hidden'></div>\");\n");
      out.write("                    node.append(up);\n");
      out.write("                    up.on('click', function () {\n");
      out.write("                        sv.pages.scrollTo(0, 0.6, \"ease-in\");\n");
      out.write("                    });\n");
      out.write("                    var buts = A.Node.create(\"<div class='exxo-scrollview-buttons'></div>\");\n");
      out.write("                    node.append(buts);\n");
      out.write("                    var back = A.Node.create(\"<button class='exxo-scrollview-back'></button>\");\n");
      out.write("                    buts.append(back);\n");
      out.write("                    var next = A.Node.create(\"<button class='exxo-scrollview-next'></button>\");\n");
      out.write("                    buts.append(next);\n");
      out.write("                    next.on('click', function () {\n");
      out.write("                        sv.pages.next();\n");
      out.write("                    });\n");
      out.write("                    back.on('click', function () {\n");
      out.write("                        sv.pages.prev();\n");
      out.write("                    });\n");
      out.write("                    var nodeWidth = A.Number.parse(node.getComputedStyle('width').split('px')[0]);\n");
      out.write("                    ;\n");
      out.write("                    var nodeHeight = A.Number.parse(node.getComputedStyle('height').split('px')[0]);\n");
      out.write("                    var nodeFontSize = A.Number.parse(node.getComputedStyle('fontSize').split('px')[0]);\n");
      out.write("                    if (nodeWidth - Math.round(nodeWidth) != 0) {\n");
      out.write("                        var width = Math.round(nodeWidth) + \"px\";\n");
      out.write("                        var height = Math.round(nodeHeight) + \"px\";\n");
      out.write("                        var styles = {width: width, height: height};\n");
      out.write("                        node.setStyles(styles);\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("                function scrollViewH(node, string, servlet, x2) {\n");
      out.write("                    node.addClass('exxo-hidden');\n");
      out.write("                    var nodeW = Math.round(A.Number.parse(node.get('parentNode').getComputedStyle('width').split('px')[0]));\n");
      out.write("                    node.removeClass('exxo-hidden');\n");
      out.write("                    var count = 1;\n");
      out.write("                    var sv = new A.ScrollView({srcNode: node.one(string), height: 150, width: nodeW - 10, axis: \"x\", flick: false, drag: false,\n");
      out.write("                        on: {'scrollEnd': function () {\n");
      out.write("                                if (sv.pages.get('index') == 0 && up != null)\n");
      out.write("                                    up.addClass('exxo-hidden');\n");
      out.write("                                else if (sv.pages.get('index') != 0)\n");
      out.write("                                    up.removeClass('exxo-hidden');\n");
      out.write("                                node.all('.unload_' + (this.pages.get('index') + 1)).removeClass('exxo-loading');\n");
      out.write("                            },\n");
      out.write("                            'render': function () {\n");
      out.write("                                node.all('.unload_' + this.pages.get('index')).removeClass('exxo-loading');\n");
      out.write("                                A.all('.unload_' + (this.pages.get('index') + 1)).removeClass('exxo-loading');\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                    });\n");
      out.write("                    sv.plug(A.Plugin.ScrollViewPaginator, {selector: 'li'});\n");
      out.write("                    sv.render();\n");
      out.write("                    //contentDelegate(sv);\n");
      out.write("                    node.setStyle('position', 'relative');\n");
      out.write("                    var up = A.Node.create(\"<div class='exxo-scrollview-up exxo-hidden'></div>\");\n");
      out.write("                    node.append(up);\n");
      out.write("                    up.on('click', function () {\n");
      out.write("                        sv.pages.scrollTo(0, 0.6, \"ease-in\");\n");
      out.write("                    });\n");
      out.write("                    var buts = A.Node.create(\"<div class='exxo-scrollview-buttons'></div>\");\n");
      out.write("                    node.append(buts);\n");
      out.write("                    var back = A.Node.create(\"<button class='exxo-scrollview-back'></button>\");\n");
      out.write("                    buts.append(back);\n");
      out.write("                    var next = A.Node.create(\"<button class='exxo-scrollview-next'></button>\");\n");
      out.write("                    buts.append(next);\n");
      out.write("                    next.on('click', function () {\n");
      out.write("                        sv.pages.next();\n");
      out.write("                    });\n");
      out.write("                    back.on('click', function () {\n");
      out.write("                        sv.pages.prev();\n");
      out.write("                    });\n");
      out.write("                    var nodeWidth = A.Number.parse(node.getComputedStyle('width').split('px')[0]);\n");
      out.write("                    ;\n");
      out.write("                    var nodeHeight = A.Number.parse(node.getComputedStyle('height').split('px')[0]);\n");
      out.write("                    var nodeFontSize = A.Number.parse(node.getComputedStyle('fontSize').split('px')[0]);\n");
      out.write("                    if (nodeWidth - Math.round(nodeWidth) != 0) {\n");
      out.write("                        var width = Math.round(nodeWidth) + \"px\";\n");
      out.write("                        var height = Math.round(nodeHeight) + \"px\";\n");
      out.write("                        var styles = {width: width, height: height};\n");
      out.write("                        node.setStyles(styles);\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("        </script>\n");
      out.write("        <script type=\"text/javascript\">\n");
      out.write("            AUI().ready('aui-button-item', function (A) {\n");
      out.write("                new A.ButtonItem({icon: 'search', label: 'Axtar'}).render(A.one(\"#b\"));\n");
      out.write("                A.one(\"#b button\").setAttribute('type', 'submit');\n");
      out.write("            });\n");
      out.write("        </script>\n");
      out.write("    </body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
